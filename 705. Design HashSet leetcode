Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

void add(key) Inserts the value key into the HashSet.
bool contains(key) Returns whether the value key exists in the HashSet or not.
void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
 

Example 1:

Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)





class MyHashSet {
private:
    int size;
    std::vector<std::list<int>> buckets;

public:
    MyHashSet() {
        size = 1000;
        buckets = std::vector<std::list<int>>(size);
    }

    void add(int key) {
        int index = hash(key);
        std::list<int>& bucket = buckets[index];
        if (!contains(key, bucket)) {
            bucket.push_back(key);
        }
    }

    void remove(int key) {
        int index = hash(key);
        std::list<int>& bucket = buckets[index];
        bucket.remove(key);
    }

    bool contains(int key) {
        int index = hash(key);
        std::list<int>& bucket = buckets[index];
        return contains(key, bucket);
    }

private:
    int hash(int key) {
        return key % size;
    }

    bool contains(int key, std::list<int>& bucket) {
        for (int num : bucket) {
            if (num == key) {
                return true;
            }
        }
        return false;
    }
};
