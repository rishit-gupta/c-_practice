#include <bits/stdc++.h>
using namespace std;
void Pair_in_STL(){
    // pair in stl
    pair<int,int> p={1,2};
    cout<<p.first<<" "<<p.second<<endl;
    
    pair<int,pair<int,int>> q={1,{2,3}};
    cout<<q.first<<" "<<q.second.first<<" "<<q.second.second<<endl;
    
    pair<int,int> arr[]={{1,2},{3,4},{5,6}};
    cout<<arr[1].second<<endl;
}
void Vector_in_STL(){
    //vector in stl
    vector<int> v;
    v.push_back(1);
    v.push_back(2);
    v.push_back(3);
    v.push_back(4);
    v.push_back(5);
    v.emplace_back(6);
  
    vector<int>::iterator it = v.begin();
    it++;
    cout<<*(it)<<endl;
    for(vector<int>::iterator it1=v.begin();it1!=v.end();it1++){
        cout<<*(it1)<<" ";
    }
    cout<<endl;
    // erase 
    v.erase(v.begin()+1);
    for(auto it2=v.begin();it2!=v.end();it2++){
        cout<<*(it2)<<" ";
    }
    cout<<endl;
  
    v.erase(v.begin()+1,v.begin()+3);
    for(auto it3 : v){
        cout<<it3<<" ";
    }
    cout<<endl;
    vector<pair<int,int>> v1;
    v1.push_back({1,2});
    v1.emplace_back(3,4);

    //insert
    vector<int> v2(5,100);
    for(auto it4 : v2){
        cout<<it4<<" ";
    }
    cout<<endl;
    v2.insert(v2.begin(),300);
    for(auto it5 : v2){
        cout<<it5<<" ";
    }
    cout<<endl;
    v2.insert(v2.begin()+1,2,10);
    for(auto it6 : v2){
        cout<<it6<<" ";
    }
    
    vector<int> v3(5);
    cout<<v3.size();
    vector<int> v4(v2);
    v4.pop_back(); //delete last element
    //v1.swap(2);
    //v.clear();
    //cout<<v.empty();
}
void List_in_STL(){
  list<int> l1;
  l1.push_back(1);
  l1.emplace_back(2);
  l1.push_front(3);
  l1.emplace_front(4);
  for(auto it6 : l1){
    cout<<it6<<" ";
    }
 }
void Deque_in_STL(){
  deque<int> dq;
  dq.push_back(1);
  dq.emplace_back(2);
  dq.push_front(3);
  dq.emplace_front(4);
  dq.pop_back();
  dq.pop_front();
  dq.back();
  dq.front();
  for(auto it6 : dq){
    cout<<it6<<" ";
    }
 }
 int main()
 {
    Pair_in_STL();
    Vector_in_STL();
    List_in_STL();
       Deque_in_STL();
   
     return 0;
 }
