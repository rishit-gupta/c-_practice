// #include <bits/stdc++.h>
// using namespace std;
// void Pair_in_STL(){
//     // pair in stl
//     pair<int,int> p={1,2};
//     cout<<p.first<<" "<<p.second<<endl;
    
//     pair<int,pair<int,int>> q={1,{2,3}};
//     cout<<q.first<<" "<<q.second.first<<" "<<q.second.second<<endl;
    
//     pair<int,int> arr[]={{1,2},{3,4},{5,6}};
//     cout<<arr[1].second<<endl;
// }
// void Vector_in_STL(){
//     //vector in stl
//     vector<int> v;
//     v.push_back(1);
//     v.push_back(2);
//     v.push_back(3);
//     v.push_back(4);
//     v.push_back(5);
//     v.emplace_back(6);
  
//     vector<int>::iterator it = v.begin();
//     it++;
//     cout<<*(it)<<endl;
//     for(vector<int>::iterator it1=v.begin();it1!=v.end();it1++){
//         cout<<*(it1)<<" ";
//     }
//     cout<<endl;
//     // erase 
//     v.erase(v.begin()+1);
//     for(auto it2=v.begin();it2!=v.end();it2++){
//         cout<<*(it2)<<" ";
//     }
//     cout<<endl;
  
//     v.erase(v.begin()+1,v.begin()+3);
//     for(auto it3 : v){
//         cout<<it3<<" ";
//     }
//     cout<<endl;
//     vector<pair<int,int>> v1;
//     v1.push_back({1,2});
//     v1.emplace_back(3,4);

//     //insert
//     vector<int> v2(5,100);
//     for(auto it4 : v2){
//         cout<<it4<<" ";
//     }
//     cout<<endl;
//     v2.insert(v2.begin(),300);
//     for(auto it5 : v2){
//         cout<<it5<<" ";
//     }
//     cout<<endl;
//     v2.insert(v2.begin()+1,2,10);
//     for(auto it6 : v2){
//         cout<<it6<<" ";
//     }
    
//     vector<int> v3(5);
//     cout<<v3.size();
//     vector<int> v4(v2);
//     v4.pop_back(); //delete last element
//     //v1.swap(2);
//     //v.clear();
//     //cout<<v.empty();
// }
// void List_in_STL(){
//   list<int> l1;
//   l1.push_back(1);
//   l1.emplace_back(2);
//   l1.push_front(3);
//   l1.emplace_front(4);
//   for(auto it6 : l1){
//     cout<<it6<<" ";
//     }
//  }
// void Deque_in_STL(){
//   deque<int> dq;
//   dq.push_back(1);
//   dq.emplace_back(2);
//   dq.push_front(3);
//   dq.emplace_front(4);
//   dq.pop_back();
//   dq.pop_front();
//   dq.back();
//   dq.front();
//   for(auto it6 : dq){
//     cout<<it6<<" ";
//     }
//  }
// void Stack_in_STL(){
//   stack<int> st;
//   st.push(1);
//   st.push(2);
//   st.push(3);
//   st.push(4);
//   st.emplace(5);
//   cout<<st.top();
//   st.pop();
//   cout<<st.top();
//   cout<<st.size();
//   cout<<st.empty();

//   //stack<int> st1,st2;
//   //st1.swap(st2);
// }
// void Queue_in_STL(){
//   queue<int> q1;
//   q1.push(1);
//   q1.push(2);
//   q1.emplace(3);
//   cout<<q1.back();
//   cout<<q1.front();
//   q1.pop();
//   cout<<q1.front();
// }
// void PriorityQueue_in_STL(){
//   //Max heap push,pop - 0(logn)
//   priority_queue<int> pq;
//   pq.push(3);
//   pq.push(5);
//   pq.emplace(2);
//   cout<<pq.top();
//   pq.pop();
//   cout<<pq.top()<<endl;

//   //Min heap
//   priority_queue<int,vector<int>,greater<int>> pq1;
//   pq1.push(2);
//   pq1.push(5);
//   pq1.emplace(1);
//   cout<<pq1.top();
//   pq1.pop();
//   cout<<pq1.top();
//   }
// void set_in_STL(){
//   //sorted,unique,0(logn)
//   set<int> s;
//   s.insert(1);//{1}
//   s.insert(2);//{1,2}
//   s.insert(2);//{1,2}
//   s.insert(4);//{1,2,4}
//   s.emplace(3);//{1,2,3,4}
//   auto it =s.find(3); // return itr at index 3
//   auto it1 = s.find(5);//return s.end()
//   s.erase(1); // it can have two parameter (itr1,itr2)
//   int cnt=s.count(1); //return 1 and 0
//   auto it2 = s.lower_bound(2);
//   auto it3 = s.upper_bound(3);
  
// }
// void multiset_in_STL(){
//   //sorted only
//   multiset<int> ms;
//   ms.insert(1);//{1}
//   ms.insert(1);//{1,1}
//   ms.insert(1);//{1,1,1}
//   ms.erase(1);//{}
//   int cnt = ms.count(1);//no of 1
//   ms.erase(ms.find(1));//erase first 1 //erase(str addr,end addr)

//   //unordered set - it store unique but not sorted
//   //all syntax are same as set 0(1)
// }
// void map_in_STL(){
//   // key- value pair , store unique key ,sorted order
//   map<int,int> mpp;
//   map<pair<int,int>,int> mpp1;
//   mpp[1]=2; //store 2 at key 1
//   mpp.insert({2,3});
//   mpp.emplace({3,4});
//   mpp1[{3,2}]=10;
//   for(auto it:mpp){
//     cout<<it.first<<" "<<it.second;
//   }
//   auto it= mpp.find(3);
//   cout<<*(it).second;
//   //mutlimap is same as multiset //store duplicate key
//   //unorderedmap is same as unorderedset // unsorted 0(1)
// } 
// bool comp(pair<int,int> p1,pair<int,int> p2){
//   if(p1.second<p2.second){
//     return true;
//   if(p1.second>p2.second){
//     return false;
//   }
//   //they are same
//   if(p1.first>p2.first){
//     return true;
//   }
//   if(p1.first<p2.first){
//     return false;
//   }
// }
// void sort(){

//   sort(a,a+n);
//   sort(v.begin(),v.end());//in case of vector
//   sort(a+2,a+4);
//   sort(a,a+n,greater<int>);//sort in descending order
//   pair<int,int> a[]={{1,2},{3,4},{5,6}};
//   //sort it according to second element
//   //if second element is same then sort
//   //it according to first element in decreasing order
//   sort(a,a+n,comp);// myway sorting,here comp is a boolean function

//   int n=7;
//   int cnt=_builtin_popcount(); // no of 1 in binary //3
//   long long int m=4;
//   int cnt2=_builtin_popcountll();

//   string s ="123";
//   sort(s.begin(),s.end());
//   do{
//     cout<<s<<endl;
//   }while(next_permutation(s.begin(),s.end()));

//   int maxi =*max_element(a,a+n);
// }
// int main()
// {
//     Pair_in_STL();
//     Vector_in_STL();
//     List_in_STL();
//     Deque_in_STL();
//     Stack_in_STL();
//     Queue_in_STL();
//     PriorityQueue_in_STL();
//     set_in_STL();
//     multiset_in_STL();
//     map_in_STL();
//     sort();
 //     return 0;
 // }
// completed STL
