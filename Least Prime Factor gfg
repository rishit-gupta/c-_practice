Given a number N, find the least prime factors for all numbers from 1 to N.  The least prime factor of an integer X is the smallest prime number that divides it.
Note :

1 needs to be printed for 1.
You need to return an array/vector/list of size N+1 and need to use 1-based indexing to store the answer for each number.
Example 1:

Input: N = 6
Output: [0, 1, 2, 3, 2, 5, 2] 
Explanation: least prime factor of 1 = 1,
least prime factor of 2 = 2,
least prime factor of 3 = 3,
least prime factor of 4 = 2,
least prime factor of 5 = 5,
least prime factor of 6 = 2.
So answer is[1, 2, 3, 2, 5, 2]. 






class Solution {
    vector<int> primes;
public:
    void sieveOfErathosnes(int n) {
        vector<bool> isPrime(n, 1);
        isPrime[0] = isPrime[1] = false;
        
        for(int i = 2; i <= sqrt(n); i++) {
            if(isPrime[i]) {
                for(int j = i * i; j <= n; j += i)
                    isPrime[j] = false;
            }
        }
        
        for(int i = 0; i <= n; i++) 
            if(isPrime[i]) primes.push_back(i);
    }
  
    vector<int> leastPrimeFactor(int n) {
        
        vector<int> temp(n + 1);
        temp[0] = 0;
        temp[1] = 1;
        sieveOfErathosnes(n);
        
        for(int i = 2; i <= n; i++) {
            for(int j = 0; j < primes.size(); j++) {
                if(i % primes[j] == 0) {
                    temp[i] = primes[j];
                    break;
                }
            }
        }
        
        return temp;
    }
};
